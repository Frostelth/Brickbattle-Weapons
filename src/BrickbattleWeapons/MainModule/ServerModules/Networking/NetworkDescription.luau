--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, shadowing, incorrect_standard_library_use)
-- Server generated by Zap v0.6.1 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local reliable = ReplicatedStorage:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = ReplicatedStorage
end

local unreliable = ReplicatedStorage:FindFirstChild("ZAP_UNRELIABLE")
if unreliable == nil then
	unreliable = Instance.new("UnreliableRemoteEvent")
	unreliable.Name = "ZAP_UNRELIABLE"
	unreliable.Parent = ReplicatedStorage
end

local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

RunService.Heartbeat:Connect(function()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end)

local events = table.create(33)
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 1 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			value.color = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if events[1] then
				task.spawn(events[1], player, value)
			end
		elseif id == 5 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.hitPart = incoming_inst[incoming_ipos]
			else
				value.hitPart = nil
			end
			if events[5] then
				task.spawn(events[5], player, value)
			end
		elseif id == 6 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if events[6] then
				task.spawn(events[6], player, value)
			end
		elseif id == 10 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.hitPart = incoming_inst[incoming_ipos]
			else
				value.hitPart = nil
			end
			if events[10] then
				task.spawn(events[10], player, value)
			end
		elseif id == 11 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			value.color = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if events[11] then
				task.spawn(events[11], player, value)
			end
		elseif id == 15 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.hitPart = incoming_inst[incoming_ipos]
			else
				value.hitPart = nil
			end
			if events[15] then
				task.spawn(events[15], player, value)
			end
		elseif id == 17 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			local pos = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			local axisangle = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			local angle = axisangle.Magnitude
			if angle ~= 0 then
				value.cFrame = CFrame.fromAxisAngle(axisangle, angle) + pos
			else
				value.cFrame = CFrame.new(pos)
			end
			if events[17] then
				task.spawn(events[17], player, value)
			end
		elseif id == 21 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			value.distance = buffer.readu16(incoming_buff, read(2))
			if buffer.readu8(incoming_buff, read(1)) == 1 then
				incoming_ipos = incoming_ipos + 1
				value.directHitPart = incoming_inst[incoming_ipos]
			else
				value.directHitPart = nil
			end
			value.explodedParts = {}
			local len = buffer.readu16(incoming_buff, read(2))
			for i = 1, len do
				if buffer.readu8(incoming_buff, read(1)) == 1 then
					incoming_ipos = incoming_ipos + 1
					value.explodedParts[i] = incoming_inst[incoming_ipos]
				else
					value.explodedParts[i] = nil
				end
			end
			if events[21] then
				task.spawn(events[21], player, value)
			end
		elseif id == 23 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			if events[23] then
				task.spawn(events[23], player, value)
			end
		elseif id == 27 then
			local value
			value = {}
			value.count = buffer.readu16(incoming_buff, read(2))
			value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			value.explodedParts = {}
			local len = buffer.readu16(incoming_buff, read(2))
			for i = 1, len do
				if buffer.readu8(incoming_buff, read(1)) == 1 then
					incoming_ipos = incoming_ipos + 1
					value.explodedParts[i] = incoming_inst[incoming_ipos]
				else
					value.explodedParts[i] = nil
				end
			end
			if events[27] then
				task.spawn(events[27], player, value)
			end
		elseif id == 30 then
			local value
			value = {}
			local pos = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			local axisangle = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
			local angle = axisangle.Magnitude
			if angle ~= 0 then
				value.cFrame = CFrame.fromAxisAngle(axisangle, angle) + pos
			else
				value.cFrame = CFrame.new(pos)
			end
			if events[30] then
				task.spawn(events[30], player, value)
			end
		elseif id == 31 then
			local value
			value = {}
			value.projectileType = {}
			local enum_value = buffer.readu8(incoming_buff, read(1))
			if enum_value == 0 then
				value.projectileType = "Superball"
			elseif enum_value == 1 then
				value.projectileType = "Pellet"
			elseif enum_value == 2 then
				value.projectileType = "Paintball"
			elseif enum_value == 3 then
				value.projectileType = "Rocket"
			elseif enum_value == 4 then
				value.projectileType = "Bomb"
			elseif enum_value == 5 then
				value.projectileType = "Wall"
			else
				error("Invalid enumerator")
			end
			value.count = buffer.readu16(incoming_buff, read(2))
			if events[31] then
				task.spawn(events[31], player, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
unreliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local id = buffer.readu8(buff, read(1))
	if id == 3 then
		local value
		value = {}
		value.count = buffer.readu16(incoming_buff, read(2))
		value.packetCount = buffer.readu16(incoming_buff, read(2))
		value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		if events[3] then
			task.spawn(events[3], player, value)
		end
	elseif id == 8 then
		local value
		value = {}
		value.count = buffer.readu16(incoming_buff, read(2))
		value.packetCount = buffer.readu16(incoming_buff, read(2))
		value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		if events[8] then
			task.spawn(events[8], player, value)
		end
	elseif id == 13 then
		local value
		value = {}
		value.count = buffer.readu16(incoming_buff, read(2))
		value.packetCount = buffer.readu16(incoming_buff, read(2))
		value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		if events[13] then
			task.spawn(events[13], player, value)
		end
	elseif id == 19 then
		local value
		value = {}
		value.count = buffer.readu16(incoming_buff, read(2))
		value.packetCount = buffer.readu16(incoming_buff, read(2))
		value.distance = buffer.readu16(incoming_buff, read(2))
		if events[19] then
			task.spawn(events[19], player, value)
		end
	elseif id == 25 then
		local value
		value = {}
		value.count = buffer.readu16(incoming_buff, read(2))
		value.packetCount = buffer.readu16(incoming_buff, read(2))
		value.position = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		value.velocity = Vector3.new(buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)), buffer.readf32(incoming_buff, read(4)))
		value.tickTime = buffer.readf32(incoming_buff, read(4))
		if events[25] then
			task.spawn(events[25], player, value)
		end
	elseif id == 29 then
		local value
		value = {}
		value.grip = {}
		local enum_value = buffer.readu8(incoming_buff, read(1))
		if enum_value == 0 then
			value.grip = "Out"
		elseif enum_value == 1 then
			value.grip = "Up"
		elseif enum_value == 2 then
			value.grip = "Down"
		else
			error("Invalid enumerator")
		end
		if events[29] then
			task.spawn(events[29], player, value)
		end
	else
		error("Unknown event id")
	end
end)
return {
	superballCreateReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Z)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	superballReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	pelletCreateReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 7)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	pelletReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 9)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	paintballCreateReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Z)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 12)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.color.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	paintballReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 14)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	paintballExplodeReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 16)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	rocketCreateReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			userId: (number),
			cFrame: (CFrame),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			local axis, angle = Value.cFrame:ToAxisAngle()
			axis = axis * angle
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis.Z)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			count: (number),
			userId: (number),
			cFrame: (CFrame),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			local axis, angle = Value.cFrame:ToAxisAngle()
			axis = axis * angle
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			userId: (number),
			cFrame: (CFrame),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			local axis, angle = Value.cFrame:ToAxisAngle()
			axis = axis * angle
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			userId: (number),
			cFrame: (CFrame),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 18)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			local axis, angle = Value.cFrame:ToAxisAngle()
			axis = axis * angle
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.cFrame.Position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, axis.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	rocketReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			distance: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 20)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.distance)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			distance: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 20)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.distance)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			distance: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 20)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.distance)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			distance: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 20)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.distance)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	rocketExplodeReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			userId: (number),
			distance: (number),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 22)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.distance)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			count: (number),
			userId: (number),
			distance: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 22)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.distance)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			userId: (number),
			distance: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 22)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.distance)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			userId: (number),
			distance: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 22)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.distance)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	bombCreateReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 24)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 24)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 24)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 24)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	bombReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
			tickTime: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 26)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.tickTime)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
			tickTime: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 26)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.tickTime)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
			tickTime: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 26)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.tickTime)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			packetCount: (number),
			userId: (number),
			position: (Vector3),
			velocity: (Vector3),
			tickTime: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 26)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.packetCount)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.velocity.Z)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.tickTime)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	bombExplodeReplicate = {
		Fire = function(Player: Player, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 28)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 28)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 28)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			count: (number),
			userId: (number),
			position: (Vector3),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 28)
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.X)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Y)
			alloc(4)
			buffer.writef32(outgoing_buff, outgoing_apos, Value.position.Z)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	deleteProjectileReplicate = {
		Fire = function(Player: Player, Value: ({
			projectileType: ("Superball" | "Pellet" | "Paintball" | "Rocket" | "Bomb" | "Wall"),
			count: (number),
			userId: (number),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 32)
			if Value.projectileType == "Superball" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif Value.projectileType == "Pellet" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			elseif Value.projectileType == "Paintball" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			elseif Value.projectileType == "Rocket" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			elseif Value.projectileType == "Bomb" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			elseif Value.projectileType == "Wall" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			else
				error("Invalid enumerator")
			end
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			projectileType: ("Superball" | "Pellet" | "Paintball" | "Rocket" | "Bomb" | "Wall"),
			count: (number),
			userId: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 32)
			if Value.projectileType == "Superball" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif Value.projectileType == "Pellet" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			elseif Value.projectileType == "Paintball" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			elseif Value.projectileType == "Rocket" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			elseif Value.projectileType == "Bomb" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			elseif Value.projectileType == "Wall" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			else
				error("Invalid enumerator")
			end
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			projectileType: ("Superball" | "Pellet" | "Paintball" | "Rocket" | "Bomb" | "Wall"),
			count: (number),
			userId: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 32)
			if Value.projectileType == "Superball" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif Value.projectileType == "Pellet" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			elseif Value.projectileType == "Paintball" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			elseif Value.projectileType == "Rocket" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			elseif Value.projectileType == "Bomb" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			elseif Value.projectileType == "Wall" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			else
				error("Invalid enumerator")
			end
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			projectileType: ("Superball" | "Pellet" | "Paintball" | "Rocket" | "Bomb" | "Wall"),
			count: (number),
			userId: (number),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 32)
			if Value.projectileType == "Superball" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			elseif Value.projectileType == "Pellet" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 1)
			elseif Value.projectileType == "Paintball" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 2)
			elseif Value.projectileType == "Rocket" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 3)
			elseif Value.projectileType == "Bomb" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 4)
			elseif Value.projectileType == "Wall" then
				alloc(1)
				buffer.writeu8(outgoing_buff, outgoing_apos, 5)
			else
				error("Invalid enumerator")
			end
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, Value.count)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	userThemeChanged = {
		Fire = function(Player: Player, Value: ({
			userId: (number),
			theme: (string),
		}))
			load_player(Player)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 33)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			local len = #Value.theme
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.theme, len)
			player_map[Player] = save()
		end,
		FireAll = function(Value: ({
			userId: (number),
			theme: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 33)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			local len = #Value.theme
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.theme, len)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
		FireExcept = function(Except: Player, Value: ({
			userId: (number),
			theme: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 33)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			local len = #Value.theme
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.theme, len)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					load_player(player)
					alloc(used)
					buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
					table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
					player_map[player] = save()
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			userId: (number),
			theme: (string),
		}))
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 33)
			alloc(4)
			buffer.writeu32(outgoing_buff, outgoing_apos, Value.userId)
			local len = #Value.theme
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len)
			alloc(len)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.theme, len)
			local buff, used, inst = outgoing_buff, outgoing_used, outgoing_inst
			for _, player in List do
				load_player(player)
				alloc(used)
				buffer.copy(outgoing_buff, outgoing_apos, buff, 0, used)
				table.move(inst, 1, #inst, #outgoing_inst + 1, outgoing_inst)
				player_map[player] = save()
			end
		end,
	},
	superballCreate = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		})) -> ())
			events[1] = Callback
		end,
	},
	superballUpdate = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			packetCount: (number),
			position: (Vector3),
			velocity: (Vector3),
		})) -> ())
			events[3] = Callback
		end,
	},
	superballHit = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			hitPart: ((Instance)?),
		})) -> ())
			events[5] = Callback
		end,
	},
	pelletCreate = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			position: (Vector3),
			velocity: (Vector3),
		})) -> ())
			events[6] = Callback
		end,
	},
	pelletUpdate = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			packetCount: (number),
			position: (Vector3),
			velocity: (Vector3),
		})) -> ())
			events[8] = Callback
		end,
	},
	pelletHit = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			hitPart: ((Instance)?),
		})) -> ())
			events[10] = Callback
		end,
	},
	paintballCreate = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			position: (Vector3),
			velocity: (Vector3),
			color: (Vector3),
		})) -> ())
			events[11] = Callback
		end,
	},
	paintballUpdate = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			packetCount: (number),
			position: (Vector3),
			velocity: (Vector3),
		})) -> ())
			events[13] = Callback
		end,
	},
	paintballHit = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			position: (Vector3),
			hitPart: ((Instance)?),
		})) -> ())
			events[15] = Callback
		end,
	},
	rocketCreate = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			cFrame: (CFrame),
		})) -> ())
			events[17] = Callback
		end,
	},
	rocketUpdate = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			packetCount: (number),
			distance: (number),
		})) -> ())
			events[19] = Callback
		end,
	},
	rocketExplode = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			distance: (number),
			directHitPart: ((Instance)?),
			explodedParts: ({ ((Instance)?) }),
		})) -> ())
			events[21] = Callback
		end,
	},
	bombCreate = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			position: (Vector3),
		})) -> ())
			events[23] = Callback
		end,
	},
	bombUpdate = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			packetCount: (number),
			position: (Vector3),
			velocity: (Vector3),
			tickTime: (number),
		})) -> ())
			events[25] = Callback
		end,
	},
	bombExplode = {
		SetCallback = function(Callback: (Player, ({
			count: (number),
			position: (Vector3),
			explodedParts: ({ ((Instance)?) }),
		})) -> ())
			events[27] = Callback
		end,
	},
	swordGripUpdate = {
		SetCallback = function(Callback: (Player, ({
			grip: ("Out" | "Up" | "Down"),
		})) -> ())
			events[29] = Callback
		end,
	},
	trowelPlace = {
		SetCallback = function(Callback: (Player, ({
			cFrame: (CFrame),
		})) -> ())
			events[30] = Callback
		end,
	},
	deleteProjectile = {
		SetCallback = function(Callback: (Player, ({
			projectileType: ("Superball" | "Pellet" | "Paintball" | "Rocket" | "Bomb" | "Wall"),
			count: (number),
		})) -> ())
			events[31] = Callback
		end,
	},
}
